package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	speech "cloud.google.com/go/speech/apiv1"
	speechpb "google.golang.org/genproto/googleapis/cloud/speech/v1"
)

func main() {
	// 入力するWAVファイルのパス
	audioFilePath := "./testaudio.wav"

	// 出力するテキストファイルのパス
	outputFilePath := "./testtext.txt"

	// 音声ファイルを読み込む
	audioData, err := ioutil.ReadFile(audioFilePath)
	if err != nil {
		log.Fatalf("Failed to read audio file: %v", err)
	}

	// Google Speech-to-Text クライアントを作成
	ctx := context.Background()
	client, err := speech.NewClient(ctx)
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}
	defer client.Close()

	// APIに送信するリクエストを構築
	req := &speechpb.RecognizeRequest{
		Config: &speechpb.RecognitionConfig{
			Encoding:        speechpb.RecognitionConfig_LINEAR16,
			SampleRateHertz: 48000,   // WAVファイルのサンプリングレートに合わせる
			LanguageCode:    "ja-JP", // 日本語の場合
		},
		Audio: &speechpb.RecognitionAudio{
			AudioSource: &speechpb.RecognitionAudio_Content{Content: audioData},
		},
	}

	// Speech-to-Text APIにリクエストを送信
	resp, err := client.Recognize(ctx, req)
	if err != nil {
		log.Fatalf("Failed to recognize speech: %v", err)
	}

	// テキストファイルに結果を書き込む
	file, err := os.Create(outputFilePath)
	if err != nil {
		log.Fatalf("Failed to create output file: %v", err)
	}
	defer file.Close()

	// UTF-8形式で結果を保存
	for _, result := range resp.Results {
		for _, alt := range result.Alternatives {
			_, err := file.WriteString(fmt.Sprintf("%v\n", alt.Transcript))
			if err != nil {
				log.Fatalf("Failed to write to output file: %v", err)
			}
		}
	}

	fmt.Printf("Transcription has been saved to %s\n", outputFilePath)
}
